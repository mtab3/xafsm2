
#ifndef ATOMS_H
#define ATOMS_H

#include <QString>


enum TYPEF { ENAME, ENUM, BOPEN, BCLOSE, BBOPEN, BBCLOSE };

struct Element {
  TYPEF special;
  QString Name;
  int aNum;
  double Num;
  double Weight;
};


enum AtomNo {           /* 原子名の変数に原子番号を代入 */
    START,
     H,                                                                 He,
    Li, Be,                                          B,  C,  N,  O,  F, Ne,
    Na, Mg,                                         Al, Si,  P,  S, Cl, Ar,
     K, Ca, Sc, Ti,  V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr,
    Rb, Sr,  Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te,  I, Xe,
    Cs, Ba, 
            La, Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu, 
                Hf, Ta,  W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn,
    Fr, Ra, 
            Ac, Th, Pa,  U, Np, Pu, Am, Cm, Bk, Cf, Es, Fm, Md, No, Lr, 
                Rf, Db, Sg, Bh, Hs, Mt,
    D,
    ATOMS
};

enum AbEN {
  Kedge, LIedge, LIIedge, LIIIedge, Edges
};

extern const QString AbENames[ Edges ];

struct AtomInf {    /* 各元素の情報 */
  const AtomNo AN;     /* 原子番号         */
  const QString AName;   /* 原子名 (文字列)  */
  const double M;      /* 原子量           */
};

const AtomInf A[ ATOMS ] = {  /* 各元素の情報 */
  /*  原子番号, 原子名, 原子量 */
  { START,  " ",   0           },
  {     H,  "H",   1.007900000 },
  {    He, "He",   4.002600000 },
  {    Li, "Li",   6.941000000 },
  {    Be, "Be",   9.012180000 },
  {     B,  "B",  10.810000000 },
  {     C,  "C",  12.011000000 },
  {     N,  "N",  14.006700000 },
  {     O,  "O",  15.999400000 },
  {     F,  "F",  18.998403000 },
  {    Ne, "Ne",  20.179000000 },
  {    Na, "Na",  22.989770000 },
  {    Mg, "Mg",  24.305000000 },
  {    Al, "Al",  26.981450000 },
  {    Si, "Si",  28.085500000 },
  {     P,  "P",  30.973760000 },
  {     S,  "S",  32.060000000 },
  {    Cl, "Cl",  35.453000000 },
  {    Ar, "Ar",  39.948000000 },
  {     K,  "K",  39.098300000 },
  {    Ca, "Ca",  40.080000000 },
  {    Sc, "Sc",  44.955900000 },
  {    Ti, "Ti",  47.880000000 },
  {     V,  "V",  50.941500000 },
  {    Cr, "Cr",  51.996000000 },
  {    Mn, "Mn",  54.938000000 },
  {    Fe, "Fe",  55.847000000 },
  {    Co, "Co",  58.933200000 },
  {    Ni, "Ni",  58.960000000 },
  {    Cu, "Cu",  63.546000000 },
  {    Zn, "Zn",  65.380000000 },
  {    Ga, "Ga",  69.720000000 },
  {    Ge, "Ge",  72.590000000 },
  {    As, "As",  74.921600000 },
  {    Se, "Se",  78.960000000 },
  {    Br, "Br",  79.904000000 },
  {    Kr, "Kr",  83.800000000 },
  {    Rb, "Rb",  85.467800000 },
  {    Sr, "Sr",  87.620000000 },
  {     Y,  "Y",  88.905900000 },
  {    Zr, "Zr",  91.220000000 },
  {    Nb, "Nb",  92.906400000 },
  {    Mo, "Mo",  95.940000000 },
  {    Tc, "Tc",  97.907000000 },
  {    Ru, "Ru", 101.070000000 },
  {    Rh, "Rh", 102.905500000 },
  {    Pd, "Pd", 106.420000000 },
  {    Ag, "Ag", 107.868000000 },
  {    Cd, "Cd", 112.410000000 },
  {    In, "In", 114.820000000 },
  {    Sn, "Sn", 118.690000000 },
  {    Sb, "Sb", 121.750000000 },
  {    Te, "Te", 127.600000000 },
  {     I,  "I", 126.904500000 },
  {    Xe, "Xe", 131.290000000 },
  {    Cs, "Cs", 132.905400000 },
  {    Ba, "Ba", 137.330000000 },

  {    La, "La", 138.905500000 },
  {    Ce, "Ce", 140.120000000 },
  {    Pr, "Pr", 140.907700000 },
  {    Nd, "Nd", 144.240000000 },
  {    Pm, "Pm", 144.913000000 },
  {    Sm, "Sm", 150.360000000 },
  {    Eu, "Eu", 151.960000000 },
  {    Gd, "Gd", 157.250000000 },
  {    Tb, "Tb", 158.925400000 },
  {    Dy, "Dy", 162.500000000 },
  {    Ho, "Ho", 164.930400000 },
  {    Er, "Er", 167.260000000 },
  {    Tm, "Tm", 168.934200000 },
  {    Yb, "Yb", 173.040000000 },
  {    Lu, "Lu", 174.967000000 },

  {    Hf, "Hf", 178.490000000 },
  {    Ta, "Ta", 180.947900000 },
  {     W,  "W", 183.850000000 },
  {    Re, "Re", 186.207000000 },
  {    Os, "Os", 190.200000000 },
  {    Ir, "Ir", 192.220000000 },
  {    Pt, "Pt", 195.080000000 },
  {    Au, "Au", 196.966500000 },
  {    Hg, "Hg", 200.590000000 },
  {    Tl, "Tl", 204.383000000 },
  {    Pb, "Pb", 207.200000000 },
  {    Bi, "Bi", 208.980400000 },
  {    Po, "Po", 208.982000000 },
  {    At, "At", 209.987000000 },
  {    Rn, "Rn", 222.018000000 },
  {    Fr, "Fr", 223.020000000 },
  {    Ra, "Ra", 226.025400000 },

  {    Ac, "Ac", 227.027800000 },
  {    Th, "Th", 232.038100000 },
  {    Pa, "Pa", 231.035900000 },
  {     U,  "U", 238.051000000 },
  {    Np, "Np", 237.048200000 },
  {    Pu, "Pu", 239.052000000 },
  {    Am, "Am", 243.061000000 },
  {    Cm, "Cm", 247.070000000 },
  {    Bk, "Bk", 247.070000000 },
  {    Cf, "Cf", 251.080000000 },
  {    Es, "Es", 252.083000000 },
  {    Fm, "Fm", 257.095000000 },
  {    Md, "Md",   0.000000000 },
  {    No, "No",   0.000000000 },
  {    Lr, "Lr",   0.000000000 },

  {    Rf, "Rf",   0.000000000 },
  {    Db, "Db",   0.000000000 },
  {    Sg, "Sg",   0.000000000 },
  {    Bh, "Bh",   0.000000000 },
  {    Hs, "Hs",   0.000000000 },
  {    Mt, "Mt",   0.000000000 },

  {    D,  "D",    2.013553210 },
};

struct VICS {
  int AN;
  double AE[ 5 ];       // K, LI, LII, LIII, MI
  double C[ 5 ];
  double D[ 5 ];
};

void ReadVicF( void );

extern VICS Vic[ 100 ];
extern int Vics;

#endif
